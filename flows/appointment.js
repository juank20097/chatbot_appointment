require('dotenv').config();

const { addKeyword } = require('@bot-whatsapp/bot');
const Utilities = require('../utilities/utilities');
const ServiceCalendar = require('../services/serviceCalendar');
const ServiceUser = require('../services/serviceUser');
const User = require('../models/user');

const sessions = {};

const serviceCalendar = new ServiceCalendar();
const serviceUser = new ServiceUser();
const utilities = new Utilities();

let user = new User();
let date = '';
let view_options = '';
let options = '';
let startTimeF = '';
let endTimeF = '';
let dni = '';

function startInactivityTimer(userId, gotoFlow, ctx) {
    // Si ya existe un temporizador para este usuario, lo limpiamos.
    if (sessions[userId]?.timeout) {
        clearTimeout(sessions[userId].timeout);
    }

    // Configuramos un nuevo temporizador de 5 minutos.
    sessions[userId] = {
        ...sessions[userId],
        timeout: setTimeout(() => {
            console.log(`‚è≥ Tiempo de inactividad excedido para el usuario: ${userId}`);
            gotoFlow(flowCierre).then(() => {
                console.log(`üîÑ Redirigiendo a flowCierre para: ${userId}`);
            });
        }, 300000), // 5 minutos en milisegundos
    };
}

function clearInactivityTimer(userId) {
    if (sessions[userId]?.timeout) {
        clearTimeout(sessions[userId].timeout);
        delete sessions[userId].timeout;
    }
}

/*------------------------------M√©todos de cierre de sessi√≥n------------------------------------*/

const flowCierre = addKeyword([''])
    .addAnswer(
        '‚è≥ Tiempo de inactividad excedido......',
        async (ctx) => {
            const userId = ctx.from;
            clearInactivityTimer(userId); // Limpia el temporizador de este usuario.
        })
    .addAnswer(
        '¬°Gracias por comunicarte! üòä Si necesitas algo m√°s, no dudes en contactarnos.')
    .addAnswer(
        'üë®‚Äçüíª *Informaci√≥n del Desarrollador:* \n' +
        'üìõ *Nombre:* Juan Carlos Est√©vez Hidalgo \n' +
        'üìß *Correo:* juank20097@gmail.com \n' +
        'üì± *Tel√©fono:* +593 980365958 \n' +
        'üìÇ *Repositorio GitHub:* https://github.com/juank20097 \n')

const flowSigner = addKeyword([''])
    .addAnswer(
        '‚úÖ El proceso ha finalizado con √©xito.')
    .addAnswer(
        'üë®‚Äçüíª *Informaci√≥n del Desarrollador:* \n' +
        'üìõ *Nombre:* Juan Carlos Est√©vez Hidalgo \n' +
        'üìß *Correo:* juank20097@gmail.com \n' +
        'üì± *Tel√©fono:* +593 980365958 \n' +
        'üìÇ *Repositorio GitHub:* https://github.com/juank20097 \n')

const flowClose = addKeyword('')
    .addAnswer(
        'üéâ ¬°Cita agendada con √©xito! üìÖ Revisa tu correo para m√°s detalles.'
    )
    .addAnswer([
        'üîÑ *¬øHay algo m√°s en lo que pueda ayudarte? üòä*',
        'üëâ *1.* S√≠',
        'üëâ *2.* No'
    ],
        { capture: true },
        async (ctx, { gotoFlow, fallBack }) => {
            const respuesta = ctx.body.trim();
            console.log('‚úÖ ayuda capturada:', respuesta);
            if (respuesta === '1' || respuesta === 'si' || respuesta === 'SI' || respuesta === 'Si') {
                return gotoFlow(flowPrincipal);
            } else if (respuesta === '2' || respuesta === 'no' || respuesta === 'No' || respuesta === 'NO') {
                return gotoFlow(flowSigner);
            } else {
                return fallBack();
            }
        }
    )

/*--------------------------------flows de Cierre y Despedida------------------------------------------------*/
const flowValidateDni2 = addKeyword(dni)
    .addAnswer([
        'üîÑ *¬øEl dato ingresado es correcto?*',
        'üëâ *1.* S√≠',
        'üëâ *2.* No'
    ],
        { capture: true },
        async (ctx, { fallBack, gotoFlow, flowDynamic }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);

            const respuesta = ctx.body.trim(); // Captura el DNI ingresado por el usuario
            console.log('‚úÖ validaci√≥n capturada:', respuesta);
            if (respuesta === '1' || respuesta === 'si' || respuesta === 'SI' || respuesta === 'Si') {
                user = await serviceCalendar.
                console.log(user);
            } else if (respuesta === '2' || respuesta === 'no' || respuesta === 'No' || respuesta === 'NO') {
                await flowDynamic('üö® Lamento que el dato este incorrecto. ¬°Intent√©moslo de nuevo! üîÑ')
                return gotoFlow(flowDni);
            } else {
                return fallBack();
            }
        }
    );

const flowVerificar = addKeyword(['2'])
    .addAction((ctx, { gotoFlow }) => {
        const userId = ctx.from;
        startInactivityTimer(userId, gotoFlow, ctx);
        dni = '';
    })
    .addAnswer(['üìÑ Por favor, ingresa tu n√∫mero de c√©dula o pasaporte para buscar la cita respectiva. üîç',
    ],
        { capture: true },
        async (ctx, { gotoFlow, flowDynamic }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);
            dni = ctx.body.trim();
            console.log('‚úÖ DNI capturada:', dni);
            return await flowDynamic('‚úÖ Has ingresado el dato: ' + dni);
        },
        [flowValidateDni2]
    )

/*--------------------------------------------2) Verificar-------------------------------------------------------------*/
const flowEmail = addKeyword('')
    .addAnswer(
        `¬°Gracias, ${user.name}! üôè Por favor, ingresa tu correo para enviarte los detalles de tu cita.`,
        { capture: true },
        async (ctx, { gotoFlow, flowDynamic }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);

            const respuesta = ctx.body.trim(); // Captura el DNI ingresado por el usuario
            console.log('‚úÖ correo capturada:', respuesta);
            user.email = respuesta;
            user.cellphone = ctx.from.split('@')[0];
            await flowDynamic('‚úÖ Has ingresado el correo: ' + user.email);
            await serviceUser.createUser(user.dni, user.name, user.email, user.cellphone);
            return await serviceCalendar.createEvent(user.name, user.dni, user.email, date, startTimeF, endTimeF);
        },
        [flowClose]
    )

const flowUser = addKeyword('1', 'si')
    .addAction(async (ctx, { flowDynamic, gotoFlow }) => {
        const userId = ctx.from;
        startInactivityTimer(userId, gotoFlow, ctx);

        if (user !== null) {
            await flowDynamic(`¬°Hola ${user.name}! üëã Un placer tenerte de nuevo.`)
            await serviceCalendar.createEvent(user.name, user.dni, user.email, date, startTimeF, endTimeF);
            return gotoFlow(flowClose);
        } else {
            user = new User();
        }
    })
    .addAnswer(
        '‚ùå No te encontramos en nuestro sistema. üòî Ingresa tu nombre completo, por favor.',
        { capture: true },
        async (ctx, {  gotoFlow, flowDynamic }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);
            const respuesta = ctx.body.trim(); // Captura el DNI ingresado por el usuario
            console.log('‚úÖ nombre capturada:', respuesta);
            user.dni = dni;
            user.name = respuesta;
            return await flowDynamic('‚úÖ Has ingresado el nombre: ' + user.name);
        },
        [flowEmail]
    )


const flowValidateDni = addKeyword(dni)
    .addAnswer([
        'üîÑ *¬øEl dato ingresado es correcto?*',
        'üëâ *1.* S√≠',
        'üëâ *2.* No'
    ],
        { capture: true },
        async (ctx, { fallBack, gotoFlow, flowDynamic }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);

            const respuesta = ctx.body.trim(); // Captura el DNI ingresado por el usuario
            console.log('‚úÖ validaci√≥n capturada:', respuesta);
            if (respuesta === '1' || respuesta === 'si' || respuesta === 'SI' || respuesta === 'Si') {
                user = await serviceUser.getUserByDni(dni);
                console.log(user);
            } else if (respuesta === '2' || respuesta === 'no' || respuesta === 'No' || respuesta === 'NO') {
                await flowDynamic('üö® Lamento que el dato este incorrecto. ¬°Intent√©moslo de nuevo! üîÑ')
                return gotoFlow(flowDni);
            } else {
                return fallBack();
            }
        },
        [flowUser]
    );

const flowDni = addKeyword(['1', '2', '3', '4', '5', '6', '7', '8', '9'])
    .addAnswer(['üåü ¬°Estamos casi listos!',
        '',
        'Por favor, comparte tu n√∫mero de c√©dula de identidad o pasaporte para completar tu agendamiento. üòä'
    ],
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);

            if (!ctx.session) ctx.session = {}; // Asegurarse de que ctx.session est√© inicializado
            dni = ctx.body.trim();
            console.log('‚úÖ DNI capturado:', dni);
            return await flowDynamic('‚úÖ Has ingresado el dato: ' + dni);
        },
        [flowValidateDni]
    );

const flowValidateDate = addKeyword([date])
    .addAction(async (ctx, { flowDynamic, gotoFlow }) => {
        const userId = ctx.from;
        startInactivityTimer(userId, gotoFlow, ctx);
        if (!utilities.validateDateFormat(date)) {
            await flowDynamic('‚ö†Ô∏è *Ups... Algo no est√° bien.* La fecha que ingresaste no est√° en formato v√°lida.');
            return gotoFlow(flowAgendar);
        }
        if (!utilities.validateDateNotInPast(date)) {
            await flowDynamic('‚ö†Ô∏è *Ups... Algo no est√° bien.* La fecha ingresada es pasada.üôè Selecciona otra fecha.');
            return gotoFlow(flowAgendar);
        }

        date = utilities.castDateFormat(date);
        console.log('‚úÖ Fecha v√°lida:', date);

        const dayOfWeek = utilities.getDayOfWeek(date);
        const isSaturday = dayOfWeek === 6;
        const isSunday = dayOfWeek === 0;

        if (isSaturday && process.env.SaturdayWork === 'false') {
            await flowDynamic('‚ö†Ô∏è La fecha es un *S√°bado* üìÖ, y no ofrecemos atenci√≥n ese d√≠a. üôè Selecciona otra fecha.');
            return gotoFlow(flowAgendar);
        }
        if (isSunday && process.env.SundayWork === 'false') {
            await flowDynamic('‚ö†Ô∏è La fecha es un *Domingo* üìÖ, y no ofrecemos atenci√≥n ese d√≠a. üôè Selecciona otra fecha.');
            return gotoFlow(flowAgendar);
        }

        const blackList = JSON.parse(process.env.BlackList || '[]');
        if (blackList.includes(date)) {
            await flowDynamic('üö´ Lo sentimos, la fecha seleccionada no est√° disponible.üôè Selecciona otra fecha.');
            return gotoFlow(flowAgendar);
        }
    })
    .addAction(async (ctx, { flowDynamic, gotoFlow }) => {
        const serv = await serviceCalendar.getEventsByDate(date).catch(error => {
            console.error('Error al obtener eventos:', error.message);
        });

        const events = (serv?.items || []).map(item => ({
            start: item.start.dateTime,
            end: item.end.dateTime,
        }));

        options = utilities.generateTimeSlots(
            date, process.env.startTime, process.env.endTime,
            process.env.duration, process.env.lunchTimeStart,
            process.env.lunchTimeEnd, events
        );

        if (!options || options.length === 0) {
            await flowDynamic(`üö´ *NO* hay citas disponibles para la fecha seleccionada.üôè Selecciona otra fecha.`);
            return gotoFlow(flowAgendar);
        }

        view_options = options
            .map((slot, index) => `${index + 1}) ${slot}`)
            .join('\n');
        await flowDynamic([
            'üìÖ Por favor, ingresa el n√∫mero de la cita que deseas agendar:',
            '',
            `${view_options}`,
        ]);
    })
    .addAnswer([
        '99) Cambiar Fecha',
    ], { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);
            const respuesta = ctx.body.trim();
            console.log('‚úÖ Respuesta capturada:', respuesta);

            if (respuesta === '99') {
                await flowDynamic('üîÑ Cambiando la fecha seleccionada...');
                return gotoFlow(flowAgendar);
            } else if (/^\d+$/.test(respuesta) && respuesta > 0 && respuesta <= options.length) {
                const { startTime, endTime } = utilities.getTimeSlot(respuesta, options);
                startTimeF = startTime
                endTimeF = endTime
                console.log('üïí Horas capturadas:', startTimeF, endTimeF);
                return await flowDynamic([{ body: `*Cita seleccionada*: ${date}, ${startTimeF}-${endTimeF}` }]);
            } else {
                await flowDynamic('üòï ¬°Parece que el dato ingresado no est√° en nuestra lista! No te preocupes, vamos a intentarlo de nuevo. üòä');
                return gotoFlow(flowAgendar);
            }
        },
        [flowDni]
    );

const flowAgendar = addKeyword(['1'])
    .addAction((ctx, { gotoFlow }) => {
        const userId = ctx.from;
        startInactivityTimer(userId, gotoFlow, ctx);
        user = new User();
        date = '';
        view_options = '';
        options = '';
        startTimeF = '';
        endTimeF = '';
        dni = '';
    })
    .addAnswer(['üóìÔ∏è Para agendar tu cita, ind√≠canos la fecha en la que deseas programarla.',
        '',
        'Por favor, aseg√∫rate de escribir la fecha en el siguiente formato: *(DD/MM/AAAA)*.'
    ],
        { capture: true },
        async (ctx, { gotoFlow }) => {
            const userId = ctx.from;
            startInactivityTimer(userId, gotoFlow, ctx);
            const respuesta = ctx.body.trim();
            console.log('‚úÖ Fecha capturada:', respuesta);
            date = respuesta;
        },
        [flowValidateDate]
    )

/*-----------------------------------1) Agendar----------------------------------*/

const flowPrincipal = addKeyword(['citas'])
    .addAction((ctx, { gotoFlow }) => {
        const userId = ctx.from;
        startInactivityTimer(userId, gotoFlow, ctx); // Inicia o reinicia el temporizador.
    })
    .addAnswer('üëã ¬°Hola! Bienvenido al sistema de agendamiento de citas.')
    .addAnswer('Soy SON ü§ñ, tu asistente virtual, y estar√© encantado de ayudarte a coordinar tu cita de manera r√°pida y sencilla. üìÖ‚ú® Vamos a comenzar.')
    .addAnswer([
        'üìå Por favor, ingresa el n√∫mero de la opci√≥n que deseas realizar:',
        '',
        '1Ô∏è‚É£ Agendar Cita üìÖ',
        '2Ô∏è‚É£ Verificar Cita üîç',
        '3Ô∏è‚É£ Cambiar Cita üîÑ',
        '4Ô∏è‚É£ Cancelar Cita ‚ùå '
    ],
        { capture: true },
        async (ctx, { fallBack, gotoFlow }) => {
            const userId = ctx.from;
            const respuesta = ctx.body.trim();
            console.log('‚úÖ Respuesta capturada flujo principal:', respuesta);
            startInactivityTimer(userId, gotoFlow, ctx);

            if (!['1', '2', '3', '4'].includes(respuesta)) {
                return fallBack();
            }
        },
        [flowAgendar, flowVerificar]
    )

module.exports = {
    flowPrincipal
};